// Generated by CoffeeScript 1.6.3
(function() {
  var dbMap, dbMethods, getUuid, idify, processError, processMessage, ready, useWebWorker, uuid,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  dbMethods = {
    put: true,
    post: true,
    get: true,
    remove: true,
    bulkDocs: true,
    allDocs: true,
    putAttachment: true,
    getAttachment: true,
    removeAttachment: true,
    query: true,
    info: true,
    compact: true,
    revsDiff: true,
    changes: true
  };

  uuid = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r, v, _ref;
      r = Math.random() * 16 | 0;
      v = (_ref = c === 'x') != null ? _ref : {
        r: r & 0x3 | 0x8
      };
      return v.toString(16);
    });
  };

  if (window.document !== void 0) {
    useWebWorker = false;
    angular.module('pouchdb', ['ng']).provider('pouchdb', function() {
      return {
        $get: function($q, $rootScope, $timeout) {
          var processMap, qify, worker, workerify;
          processMap = {};
          worker = null;
          qify = function(fn) {
            return function() {
              var args, callback, deferred;
              callback = function(err, res) {
                return $timeout(function() {
                  return $rootScope.$apply(function() {
                    if (err) {
                      return deferred.reject(err);
                    } else {
                      return deferred.resolve(res);
                    }
                  });
                });
              };
              deferred = $q.defer();
              args = arguments != null ? Array.prototype.slice.call(arguments) : [];
              args.push(callback);
              fn.apply(this, args);
              return deferred.promise;
            };
          };
          workerify = function(dbId, method) {
            return function() {
              var args, deferred, id;
              id = uuid();
              deferred = $q.defer();
              args = arguments != null ? Array.prototype.slice.call(arguments) : [];
              self.postMessage({
                type: method,
                params: args,
                db: dbId,
                _uuid: id
              });
              processMap[id] = deferred.promise;
              return deferred.promise;
            };
          };
          return {
            useWebWorker: function(onoff) {
              if (onoff === true || onoff === false) {
                if (onoff !== useWebWorker) {
                  if (useWebWorker === true && worker !== null) {
                    worker.close();
                    worker = null;
                  } else {
                    worker = new Worker('angular-pouchdb.js');
                  }
                }
                useWebWorker = onoff;
              }
              return useWebWorker;
            },
            create: function(name, options) {
              var db, id, method, _db;
              if (useWebWorker) {
                id = uuid();
                _db = {
                  id: id
                };
                for (method in dbMethods) {
                  if (!__hasProp.call(dbMethods, method)) continue;
                  _db[method] = workify(id, method);
                }
              } else {
                db = new PouchDB(name, options);
                _db = {
                  changes: function(options) {
                    var clone;
                    clone = angular.copy(options);
                    clone.onChange = function(change) {
                      return $timeout(function() {
                        return $rootScope.$apply(function() {
                          return options.onChange(change);
                        });
                      });
                    };
                    return db.changes(clone);
                  },
                  type: db.type
                };
                for (method in dbMethods) {
                  if (!__hasProp.call(dbMethods, method)) continue;
                  _db[method] = qify(db[method]);
                }
              }
              return _db;
            },
            allDbs: qify(PouchDB.allDbs),
            destroy: qify(PouchDB.destroy),
            replicate: PouchDB.replicate
          };
        }
      };
    });
  } else {
    ready = false;
    dbMap = {};
    getUuid = function() {
      var id;
      id = uuid();
      while (__indexOf.call(dbMap, id) >= 0) {
        id = uuid();
      }
      return id;
    };
    idify = function(method, params, scope, id) {
      var args, callback;
      if (scope == null) {
        scope = PouchDB;
      }
      if (id == null) {
        id = null;
      }
      if (id === null) {
        id = getUuid();
      }
      callback = function(err, res) {
        return self.postMessage({
          err: err,
          res: res,
          id: id
        });
      };
      args = params;
      args.push(callback);
      scope[method].apply(scope, args);
      return id;
    };
    processError = function(evt) {
      return self.postMessage({
        type: 'error',
        data: evt
      });
    };
    processMessage = function(evt) {
      var _ref, _ref1;
      if (!ready && (((_ref = evt.data) != null ? _ref.type : void 0) != null) !== 'script') {
        return;
      }
      switch (evt.data.type) {
        case 'close':
          return self.close();
        case 'script':
          importScripts(evt.data.path);
          ready = true;
          return self.postMessage('ready');
        case 'db':
          return dbMap[evt.data.db] = PouchDB(evt.data.name, evt.data.params, PouchDB);
        case 'destroy':
          return idify('destroy', evt.data.params, PouchDB, evt.data.id);
        case 'allDbs':
          return idify('allDbs', evt.data.params, PouchDB, evt.data.id);
        case 'replicate':
          throw new Error("Not Implemented");
          break;
        default:
          if (_ref1 = evt.data.type, __indexOf.call(dbMethods, _ref1) >= 0) {
            return idify(evt.data.type, evt.data.params, dbMap[ext.data.db], ext.data.id);
          } else {
            throw new Error("Not Implemented");
          }
      }
    };
    self.addEventListener('message', processMessage, false);
    self.addEventListener('error', processError, false);
  }

}).call(this);

/*
//@ sourceMappingURL=angular-pouchdb.map
*/
