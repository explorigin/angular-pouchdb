// Generated by CoffeeScript 1.6.3
var dbMap, getUuid, idify, processError, processMessage, ready, uuid,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

ready = false;

dbMap = {};

uuid = function() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r, v;
    r = Math.random() * 16 | 0;
    v = c === 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });
};

getUuid = function() {
  var id;
  id = uuid();
  while (__indexOf.call(dbMap, id) >= 0) {
    id = uuid();
  }
  return id;
};

idify = function(method, params, scope, id) {
  var args, callback;
  if (scope == null) {
    scope = PouchDB;
  }
  if (id == null) {
    id = null;
  }
  if (id === null) {
    id = getUuid();
  }
  callback = function(err, res) {
    return self.postMessage({
      err: err,
      res: res,
      id: id
    });
  };
  args = params;
  args.push(callback);
  scope[method].apply(scope, args);
  return id;
};

processError = function(evt) {
  return self.postMessage({
    type: 'error',
    data: evt
  });
};

processMessage = function(evt) {
  var _ref, _ref1;
  console.log(evt.data);
  if (!ready && (((_ref = evt.data) != null ? _ref.type : void 0) != null) && evt.data.type !== 'script') {
    console.log('canceling');
    return;
  }
  switch (evt.data.type) {
    case 'close':
      return self.close();
    case 'script':
      console.log('importing: ' + evt.data.path);
      importScripts(evt.data.path);
      ready = true;
      return self.postMessage('ready');
    case 'db':
      return dbMap[evt.data.db] = PouchDB(evt.data.name, evt.data.params, PouchDB);
    case 'destroy':
      return idify('destroy', evt.data.params, PouchDB, evt.data.id);
    case 'allDbs':
      return idify('allDbs', evt.data.params, PouchDB, evt.data.id);
    case 'replicate':
      return console.log(evt.data);
    default:
      if (_ref1 = evt.data.type, __indexOf.call(dbMethods, _ref1) >= 0) {
        return idify(evt.data.type, evt.data.params, dbMap[ext.data.db], ext.data.id);
      } else {
        console.log("not implemented");
        return console.log(evt.data);
      }
  }
};

self.addEventListener('message', processMessage, false);

self.addEventListener('error', processError, false);
